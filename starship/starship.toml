# ==========================
# Û∞£ê CONFIGURAZIONE GENERALE
# ==========================

# Non aggiunge una nuova riga tra l'output dei comandi e il prompt
add_newline = false

# Timeout ridotto per migliori performance (500ms invece di 1000ms)
command_timeout = 500


# ==========================
# Û∞∏å STRUTTURA DEL PROMPT
# ==========================

# Prompt a sinistra: informazioni essenziali ottimizzate per performance
format = """$os$username$hostname$directory$git_branch$git_status$python$nodejs$docker_context$kubernetes$jobs$status$cmd_duration"""

# Prompt a destra: informazioni secondarie con batteria intelligente
right_format = """$shlvl$battery$time"""


# ==========================
# Û±êã PERSONALIZZAZIONE PROMPT
# ==========================

# Simboli di default all'inizio del prompt (come > o $)
[character]
success_symbol = ''   # Niente simbolo se l'ultimo comando ha avuto successo
error_symbol = ''     # Niente simbolo se l'ultimo comando ha generato errore


# ==========================
# Û∞ä† SISTEMA OPERATIVO
# ==========================

# Mostra l'icona del sistema operativo
[os]
format = '[$symbol](bold white) '   # Colore bianco in grassetto per l'icona
disabled = false                     # Modulo attivo

# Simboli personalizzati per diversi sistemi operativi
[os.symbols]
Windows = 'Óò™'   # Windows
Arch = 'Û∞£á'       # Arch Linux
Ubuntu = 'Ôåõ'     # Ubuntu
Macos = 'Û∞Äµ'       # macOS


# ==========================
# Û∞ÄÑ INFORMAZIONI UTENTE
# ==========================

# Mostra il nome utente
[username]
style_user = 'white bold'            # Utente normale: bianco in grassetto
style_root = 'black bold'            # Utente root: nero in grassetto
format = '[$user]($style) '          # Formato della visualizzazione
disabled = false                     # Sempre attivo
show_always = true                   # Mostrato anche se non in sessione SSH


# ==========================
# Û∞áß NOME HOST
# ==========================

# Mostra il nome dell'host, utile per sessioni SSH o ambienti remoti
[hostname]
ssh_only = false                     # Mostrato anche in locale
format = 'on [$hostname](bold yellow) '  # Giallo in grassetto
disabled = false


# ==========================
# Û±Éæ  KUBERNETES CONTEXT
# ==========================

# Mostra il contesto Kubernetes solo quando rilevante
[kubernetes]
format = 'via [Û±Éæ $context\($namespace\)](bold purple) '  # Viola in grassetto
disabled = false
detect_files = ["k8s", "kustomization.yaml", "Chart.yaml"]
detect_folders = ["k8s"]


# ==========================
# Û∞âã DIRECTORY CORRENTE
# ==========================

[directory]
truncation_length = 4                # Mostra le ultime 4 directory per migliore contesto
fish_style_pwd_dir_length = 1        # Abbrevia directory intermedie ad 1 carattere
truncation_symbol = '‚Ä¶/'             # Simbolo per indicare truncamento
home_symbol = 'Û∞ãú ~'                  # Icona per la home directory
read_only_style = '197'              # Colore se la directory √® di sola lettura
read_only = '  '                    # Simbolo lucchetto per directory di sola lettura
format = 'at [$path]($style)[$read_only]($read_only_style) '
repo_root_style = 'bold cyan'        # Evidenzia la root del repository


# ==========================
# Û∞ä¢ BRANCH E STATO GIT
# ==========================

# Mostra il branch Git corrente
[git_branch]
symbol = 'Ôáí '                        # Icona per il branch Git
format = 'via [$symbol$branch]($style) '
truncation_symbol = '‚Ä¶/'             # Troncamento branch lungo
style = 'bold green'                 # Verde in grassetto

# Mostra lo stato del repository Git (ottimizzato per performance)
[git_status]
format = '([ \( $all_status$ahead_behind\)]($style) )'
style = 'bold green'
# Indicatori semplificati per migliori performance
conflicted = '[Û∞åó ${count}](red) '        # Conflitti
up_to_date = ''                          # Nasconde "up-to-date" per ridurre clutter
untracked = '[Û∞ãó ${count}](red) '         # File non tracciati
ahead = ' ‚Üë${count}'                     # Commit in avanti (simbolo semplice)
diverged = ' ‚Üë${ahead_count} ‚Üì${behind_count}'  # Divergenza
behind = ' ‚Üì${count}'                    # Commit indietro (simbolo semplice)
stashed = '[Û∞èó ${count}](cyan) '          # Stash
modified = '[Û∞õø ${count}](yellow) '       # Modifiche
staged = '[Û∞êó ${count}](green) '          # File in stage
renamed = '[Û±ç∏ ${count}](yellow) '        # File rinominati
deleted = '[Û∞ç∂ ${count}](red) '           # File cancellati

# ==========================
# üöÄ OTTIMIZZAZIONI GIT AVANZATE (OPZIONALI)
# ==========================
#
# Per repository molto grandi, decommenta le seguenti opzioni per migliorare le performance:
#
# [git_status]
# ignore_submodules = true           # Ignora i submoduli per velocit√†
# ahead_behind = false               # Disabilita il conteggio commit avanti/indietro
#
# [git_branch]
# truncation_length = 20             # Limita la lunghezza del nome branch
#
# Per repository estremamente grandi (>10k file), considera:
# [git_status]
# disabled = true                    # Disabilita completamente git_status
#
# Oppure usa solo indicatori essenziali:
# [git_status]
# format = '[$modified$staged$untracked]($style) '
# conflicted = ""
# ahead = ""
# behind = ""
# diverged = ""
# stashed = ""
# renamed = ""
# deleted = ""

# ==========================
# Û∞û∑ LIVELLO SHELL (SHLVL)
# ==========================

# Mostra il livello corrente della shell (solo se > 1 per ridurre clutter)
[shlvl]
format = '[$shlvl](bold cyan) '  # Cyan in grassetto
disabled = false
threshold = 2                    # Mostra solo se livello shell > 1


# ==========================
# Û∞•î ORARIO
# ==========================

# Mostra l'orario corrente sul lato destro del prompt
[time]
disabled = false
format = '[$time](bold yellow)'        # Giallo in grassetto
time_format = "%H:%M:%S"               # Formato 24h con secondi

# ==========================
# Û∞îü DURATA COMANDI
# ==========================

# Mostra la durata dei comandi che impiegano pi√π di 2 secondi
[cmd_duration]
min_time = 2000                      # Mostra solo per comandi che durano pi√π di 2 secondi
format = '[Û∞îü $duration]($style) '    # Formattazione con icona di timer
style = 'yellow'                     # Colore giallo

# ==========================
# Û∞Åπ STATO BATTERIA
# ==========================

[battery]
full_symbol = "Û∞Åπ"                   # Batteria piena
charging_symbol = "Û∞ÇÑ"                # In carica
discharging_symbol = "Û∞ÇÉ"            # In scarica
format = '[$symbol $percentage]($style) '

# Mostra batteria solo quando rilevante (ottimizzato per macOS)
[[battery.display]]
threshold = 15                       # Se < 15% (critico)
style = 'red bold'                   # Rosso in grassetto

[[battery.display]]
threshold = 50                       # Se < 50% (attenzione)
style = 'yellow bold'                # Giallo in grassetto

[[battery.display]]
threshold = 85                       # Se < 85% (normale)
style = 'green'                      # Verde

# ==========================
# Û∞Öó STATO ULTIMO COMANDO
# ==========================

[status]
format = '[$symbol $status]($style) '  # Formato con simbolo e codice
symbol = "Û∞Öó"                        # Simbolo X rosso per errori
disabled = false                     # Attivo
map_symbol = true                    # Usa simboli per stati comuni

# ==========================
# Û∞íã PROCESSI IN BACKGROUND
# ==========================

[jobs]
symbol = "Û∞íã"                        # Simbolo ingranaggio per i job
format = '[${symbol} ${number}](bold blue) '  # Formato con numero di job
threshold = 1                        # Mostra solo se ci sono almeno 1 job
disabled = false                     # Attivo

# ==========================
# Û∞èì MODULI LINGUAGGI DI PROGRAMMAZIONE (OTTIMIZZATI)
# ==========================

# Docker context (abilitato perch√© Docker √® installato)
[docker_context]
format = '[Û∞°® $context](bold blue) '
disabled = false
only_with_files = true  # Mostra solo quando ci sono file Docker

# Python (principale linguaggio di sviluppo)
[python]
format = '[Û∞å† $version](bold blue) '
detect_files = ["pyproject.toml", "requirements.txt", "setup.py", "Pipfile", ".python-version"]
detect_folders = []  # Nessuna cartella attiva Python automaticamente
detect_extensions = ["py"]  # Solo quando ci sono file .py
python_binary = ["python3", "python"]
disabled = false

# Node.js (con supporto NVM ottimizzato)
[nodejs]
format = '[Û∞éô $version](bold green) '
detect_files = ["package.json", ".nvmrc", ".node-version"]
detect_folders = ["node_modules"]
not_capable_style = "bold red"
disabled = false
